#!/usr/bin/perl
# ----------------------------------------------------------------- #
#           The HMM-Based Speech Synthesis System (HTS)             #
#           developed by HTS Working Group                          #
#           http://hts.sp.nitech.ac.jp/                             #
# ----------------------------------------------------------------- #
#                                                                   #
#  Copyright (c) 2001-2012  Nagoya Institute of Technology          #
#                           Department of Computer Science          #
#                                                                   #
#                2001-2008  Tokyo Institute of Technology           #
#                           Interdisciplinary Graduate School of    #
#                           Science and Engineering                 #
#                                                                   #
#                2008       University of Edinburgh                 #
#                           Centre for Speech Technology Research   #
#                                                                   #
# All rights reserved.                                              #
#                                                                   #
# Redistribution and use in source and binary forms, with or        #
# without modification, are permitted provided that the following   #
# conditions are met:                                               #
#                                                                   #
# - Redistributions of source code must retain the above copyright  #
#   notice, this list of conditions and the following disclaimer.   #
# - Redistributions in binary form must reproduce the above         #
#   copyright notice, this list of conditions and the following     #
#   disclaimer in the documentation and/or other materials provided #
#   with the distribution.                                          #
# - Neither the name of the HTS working group nor the names of its  #
#   contributors may be used to endorse or promote products derived #
#   from this software without specific prior written permission.   #
#                                                                   #
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND            #
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,       #
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF          #
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE          #
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS #
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,          #
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED   #
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,     #
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON #
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,   #
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY    #
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE           #
# POSSIBILITY OF SUCH DAMAGE.                                       #
# ----------------------------------------------------------------- #


# Settings ==============================
$fclf = '@FULLCONTEXT_FORMAT@';
$fclv = '@FULLCONTEXT_VERSION@';
$dset = '@DATASET@';
$spkr = '@ADAPTSPKR@';
$qnum = '@QNUM@';
$ver  = '@VER@';

@SET        = ('cmp','dur');
@cmp        = ('mgc','lf0');
@dur        = ('dur');
$ref{'cmp'} = \@cmp;
$ref{'dur'} = \@dur;

%vflr = ('mgc' => '0.01',           # variance floors
         'lf0' => '0.01',
         'dur' => '0.01');

%thr  = ('mgc' => '000',            # minimum likelihood gain in clustering
         'lf0' => '000',
         'dur' => '000');

%mdlf = ('mgc' => '1.0',            # tree size control param. for MDL
         'lf0' => '1.0',
         'dur' => '1.0');

%mocc = ('mgc' => '10.0',           # minimum occupancy counts
         'lf0' => '10.0',
         'dur' => ' 5.0');

%gam  = ('mgc' => '000',            # stats load threshold
         'lf0' => '000',
         'dur' => '000');

%t2s  = ('mgc' => 'cmp',            # feature type to mmf conversion
         'lf0' => 'cmp',
         'dur' => 'dur');

%strb = ('mgc' => '1',              # stream start
         'lf0' => '2',
         'dur' => '1');

%stre = ('mgc' => '1',              # stream end
         'lf0' => '@F0STREN@',
         'dur' => '@NSTATE@');

%msdi = ('mgc' => '0',              # msd information
         'lf0' => '1',
         'dur' => '0');

%strw = ('mgc' => '1.0',            # stream weights
         'lf0' => '1.0',
         'dur' => '1.0');

%ordr = ('mgc' => '@MGCVSIZE@',     # feature order
         'lf0' => '1',
         'dur' => '@NSTATE@');

%nwin = ('mgc' => '@NMGCWIN@',      # number of windows
         'lf0' => '@NLF0WIN@',
         'dur' => '0');

%gvthr  = ('mgc' => '000',          # minimum likelihood gain in clustering for GV
           'lf0' => '000');

%gvmdlf = ('mgc' => '1.0',          # tree size control for GV
           'lf0' => '1.0');

%gvgam  = ('mgc' => '000',          # stats load threshold for GV
           'lf0' => '000');

@slnt = ('pau','h#','brth');        # silent and pause phoneme

#%mdcp = ('dy' => 'd',              # model copy
#         'A'  => 'a',
#         'I'  => 'i',
#         'U'  => 'u',
#         'E'  => 'e',
#         'O'  => 'o');


# Speech Analysis/Synthesis Setting ==============
# speech analysis
$sr = @SAMPFREQ@;   # sampling rate (Hz)
$fs = @FRAMESHIFT@; # frame period (point)
$fw = @FREQWARP@;   # frequency warping
$gm = @GAMMA@;      # pole/zero representation weight
$lg = @LNGAIN@;     # use log gain instead of linear gain

# speech synthesis
$pf_mcp = @PSTFILTER_MCP@; # postfiltering factor for mel-cepstrum
$pf_lsp = @PSTFILTER_LSP@; # postfiltering factor for LSP
$fl     = @IMPLEN@;        # length of impulse response
$co     = 2047;            # order of cepstrum to approximate mel-cepstrum


# Speaker adaptation Setting ============
$spkrPat = "\"*/@DATASET@_%%%_*\"";       # speaker name pattern

# regression classes
%dect = ('mgc' => '@DECMGCOCCTHRESH@',    # occupancy thresholds for regression classes (dec)
         'lf0' => '@DECLF0OCCTHRESH@',    # set thresholds in less than adpt and satt
         'dur' => '@DECDUROCCTHRESH@');

$nClass  = 32;                            # number of regression classes (reg)

# transforms
%nblk = ('mgc' => '@NMGCTRANSBLK@',       # number of blocks for transforms
         'lf0' => '@NLF0TRANSBLK@',
         'dur' => '1');

%band = ('mgc' => '@MGCBANDWIDTH@',       # band width for transforms
         'lf0' => '@LF0BANDWIDTH@',
         'dur' => '0');

$bias{'cmp'} = '@CMPBIAS@';               # use bias term for MLLRMEAN/CMLLR
$bias{'dur'} = '@DURBIAS@';
$tran        = '@TRANSKIND@';             # transformation kind (mean -> MLLRMEAN, cov -> MLLRCOV, or feat -> CMLLR)

# adaptation
%adpt = ('mgc' => '@MGCOCCTHRESH@',       # occupancy thresholds for adaptation
         'lf0' => '@LF0OCCTHRESH@',
         'dur' => '@DUROCCTHRESH@');

$tknd{'adp'}   = '@TREEKIND@';            # tree kind (dec -> decision tree or reg -> regression tree (k-means))
$dcov          = '@USEDCOV@';             # use diagonal covariance transform for MLLRMEAN
$usemaplr      = '@USEMAPLR@';            # use MAPLR adaptation for MLLRMEAN/CMLLR
$usevblr       = '@USEVBLR@';             # use VBLR adaptation for MLLRMEAN
$sprior        = '@USESTRUCTURALPRIOR@';  # use structural prior for MAPLR/VBLR with regression class tree
$priorscale    = @PRIORSCALE@;            # hyper-parameter for SMAPLR adaptation
$nAdapt        = @NUMADAPT@;              # number of iterations to reestimate adaptation xforms
$addMAP        = @ADDMAP@;                # apply additional MAP estimation after MLLR adaptation
$maptau{'cmp'} = @CMPMAPTAU@;             # hyper-parameters for MAP adaptation
$maptau{'dur'} = @DURMAPTAU@;

# speaker adaptive training
%satt = ('mgc' => '@SATMGCOCCTHRESH@',    # occupancy thresholds for adaptive training
         'lf0' => '@SATLF0OCCTHRESH@',
         'dur' => '@SATDUROCCTHRESH@');

$tknd{'sat'} = '@SATTREEKIND@';           # tree kind (dec -> decision tree or reg -> regression tree (k-means))
$nSAT        = @NUMSAT@;                  # number of SAT iterations


# Modeling/Generation Setting ==============
# modeling
$nState      = @NSTATE@;        # number of states
$nIte        = @NITER@;         # number of iterations for embedded training
$beam        = '1500 100 5000'; # initial, inc, and upper limit of beam width
$maxdev      = @MAXDEV@;        # max standard dev coef to control HSMM maximum duration
$mindur      = @MINDUR@;        # min state duration to be evaluated
$wf          = @WFLOOR@;        # mixture weight flooring
$initdurmean = 3.0;             # initial mean of state duration
$initdurvari = 10.0;            # initial variance of state duration
$daem        = @DAEM@;          # DAEM algorithm based parameter estimation
$daem_nIte   = @DAEMNITER@;     # number of iterations of DAEM-based embedded training
$daem_alpha  = @DAEMALPHA@;     # schedule of updating temperature parameter for DAEM

# generation
$pgtype     = @PGTYPE@;     # parameter generation algorithm (0 -> Cholesky,  1 -> MixHidden,  2 -> StateHidden)
$maxEMiter  = @MAXEMITER@;  # max EM iteration
$EMepsilon  = @EMEPSILON@;  # convergence factor for EM iteration
$useGV      = @USEGV@;      # turn on GV
$maxGViter  = @MAXGVITER@;  # max GV iteration
$GVepsilon  = @GVEPSILON@;  # convergence factor for GV iteration
$minEucNorm = @MINEUCNORM@; # minimum Euclid norm for GV iteration
$stepInit   = @STEPINIT@;   # initial step size
$stepInc    = @STEPINC@;    # step size acceleration factor
$stepDec    = @STEPDEC@;    # step size deceleration factor
$hmmWeight  = @HMMWEIGHT@;  # weight for HMM output prob.
$gvWeight   = @GVWEIGHT@;   # weight for GV output prob.
$optKind    = '@OPTKIND@';  # optimization method (STEEPEST, NEWTON, or LBFGS)
$nosilgv    = @NOSILGV@;    # GV without silent and pause phoneme
$cdgv       = @CDGV@;       # context-dependent GV


# Directories & Commands ===============
# project directories
$prjdir = '@PWD@';

# Perl
$PERL = '@PERL@';

# wc
$WC = '@WC@';

# tee
$TEE = '@TEE@';

# HTS commands
$HCOMPV    = '@HCOMPV@';
$HLIST     = '@HLIST@';
$HINIT     = '@HINIT@';
$HREST     = '@HREST@';
$HEREST    = '@HEREST@';
$HHED      = '@HHED@';
$HSMMALIGN = '@HSMMALIGN@';
$HMGENS    = '@HMGENS@';
$ENGINE    = '@ENGINE@';

# SPTK commands
$X2X      = '@X2X@';
$FREQT    = '@FREQT@';
$C2ACR    = '@C2ACR@';
$VOPR     = '@VOPR@';
$VSUM     = '@VSUM@';
$MC2B     = '@MC2B@';
$SOPR     = '@SOPR@';
$B2MC     = '@B2MC@';
$EXCITE   = '@EXCITE@';
$LSP2LPC  = '@LSP2LPC@';
$MGC2MGC  = '@MGC2MGC@';
$MGLSADF  = '@MGLSADF@';
$MERGE    = '@MERGE@';
$BCP      = '@BCP@';
$LSPCHECK = '@LSPCHECK@';
$BCUT     = '@BCUT@';
$VSTAT    = '@VSTAT@';
$NAN      = '@NAN@';
$DFS      = '@DFS@';
$SWAB     = '@SWAB@';
$RAW2WAV  = '@RAW2WAV@';


# Switch ================================
$MKEMV = 1; # preparing environments
$HCMPV = 1; # computing a global variance
$IN_RE = 1; # initialization & reestimation
$MMMMF = 1; # making a monophone mmf
$ERST0 = 1; # embedded reestimation (monophone)
$MN2FL = 1; # copying monophone mmf to fullcontext one
$ERST1 = 1; # embedded reestimation (fullcontext)
$CXCL1 = 1; # tree-based context clustering
$ERST2 = 1; # embedded reestimation (clustered)
$UNTIE = 1; # untying the parameter sharing structure
$ERST3 = 1; # embedded reestimation (untied)
$CXCL2 = 1; # tree-based context clustering
$ERST4 = 1; # embedded reestimation (re-clustered)
$FALGN = 1; # forced alignment for no-silent GV
$MCDGV = 1; # making global variance
$MKUNG = 1; # making unseen models (GV)
$MKUN1 = 1; # making unseen models (speaker independent)
$PGEN1 = 1; # generating speech parameter sequences (speaker independent)
$WGEN1 = 1; # synthesizing waveforms (speaker independent)
$REGTR = 1; # building regression-class trees for adaptation
$ADPT1 = 1; # speaker adaptation (speaker independent)
$PGEN2 = 1; # generating speech parameter sequences (speaker adapted)
$WGEN2 = 1; # synthesizing waveforms (speaker adapted)
$SPKAT = 1; # speaker adaptive training (SAT)
$MKUN2 = 1; # making unseen models (SAT)
$PGEN3 = 1; # generating speech parameter sequences (SAT)
$WGEN3 = 1; # synthesizing waveforms (SAT)
$ADPT2 = 1; # speaker adaptation (SAT)
$PGEN4 = 1; # generate speech parameter sequences (SAT+adaptation)
$WGEN4 = 1; # synthesizing waveforms (SAT+adaptation)
$CONVM = 1; # converting mmfs to the hts_engine file format
$ENGIN = 1; # synthesizing waveforms using hts_engine

1;
